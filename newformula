#!/usr/bin/python3

from pyparsing import (alphas, nums, Combine, Or, printables,
                       Group, Literal, removeQuotes, ParseException,
                       Optional, delimitedList,
                       Suppress, Word, quotedString, CaselessLiteral)


def numeric():
    point = Literal('.')
    e = CaselessLiteral('E')
    plusorminus = Literal('+') | Literal('-')
    number = Word(nums)
    integer = Combine(Optional(plusorminus) + number)
    floatnumber = Combine(integer +
                          Optional(point + Optional(number)) +
                          Optional(e + integer))
    numeric = number | floatnumber
    return numeric


def expand_interval(tokens):
    val_from = int(tokens[0])
    val_to = int(tokens[1]) + 1
    result = list(map(str, range(val_from, val_to)))
    return result


def clone_names(tokens):
    # print(tokens)
    if tokens[0] == "":
        return [tokens[1]] * 2
    else:
        return [tokens[0], tokens[1]]


def test(s, loc, tokens):
    print(tokens)
    print(tokens[0])
    print(tokens[1])
    print(tokens.attr_type)
    print(tokens.scale)
    print(tokens.unpack)
    bins = tokens.get('new_bins')
    if bins:
        print(bool(bins.new_true))
        print(bool(bins.new_false))
    print(10*"=")

date_val = quotedString.copy()
quoted_str = quotedString
quoted_str.setParseAction(removeQuotes)
comma = Suppress(",")
num_val = numeric()
op = Or(Literal("<") ^ Literal(">") ^
        Literal("<=") ^ Literal(">=") ^
        Literal("==") ^ Literal("!="))
var = Word(alphas + "_")
bin_vals = Group(Optional((Suppress("0=") + quoted_str("new_false") + comma)) + Optional(Suppress("1=")) + quoted_str("new_true"))
date_format = Optional(Suppress("F=")) + quoted_str
date_scale = Or(Combine(var + op + date_val, adjacent=False) ^
                Combine(date_val + op + var, adjacent=False) ^
                Combine(date_val + op + var + op + date_val, adjacent=False)) + Optional(Suppress("/") + date_format)("date_format_new")
str_scale = quoted_str
enum_scale = quoted_str
num_scale = Or(Combine(var + op + num_val, adjacent=False) ^
               Combine(num_val + op + var, adjacent=False) ^
               Combine(num_val + op + var + op + num_val, adjacent=False))
name = (Optional(Word(nums), default=0) + Suppress("-") +
        Optional(Word(nums), default=10)).setParseAction(expand_interval) | Word(printables, excludeChars="[]-,=:;")
scale = num_scale | enum_scale | str_scale | date_scale
typ = Or(CaselessLiteral("n") ^ CaselessLiteral("e") ^
         CaselessLiteral("s") ^ Group(Literal("d") + Optional(Suppress("/") + date_format("date_format"), default="%Y-%m-%dT%H:%M:%S")))
names = Group(delimitedList(name))
new_old_names = (Optional(names + Suppress("="), default='') + names).setParseAction(clone_names)
formula = (new_old_names +
           Optional(Or(Literal("[]")("unpack").setParseAction(lambda t: True) ^
                       (Suppress("[") + bin_vals("new_bins") + Suppress("]")) ^
                       (Suppress(":") + typ("attr_type") +
                        Optional(Suppress("[") + Optional(scale("scale")) + Suppress("]"))))))
formulas = delimitedList(formula, delim=";")

formula.setParseAction(test)

args = """ne_w,new2=old,old2:s['hell[a-z]+'];
          newdate=olddate:d/F='%Y-%m-%d'[date!='2014-02-11'];
          newdate2=olddate2:d[date!='2014-02-11'/'%Y-%m-%d'];
          5-7:n[5<INT_value<30];
          attr[];
          attr2;
          enum_attr:e;
          new_bin_values['ANO'];
          new_bin_values2[0='NO', 1='YES'];
          new_bin_values3[1='DA'];
          -:e"""

args2 = """WINDY=windy:e['TRUE'];
           SUNNY=outlook:e['sunny'];
           FOG_DUP, FOG=fog_bival, fog_bival;
           TEMP=temperature:n[x>80];
           HUM=humidity.relative.day:n[70<=x<=80];
           NOTE=note:s['hell|[0-9]'];
           BIRTHDAY=day:d/'%Y-%m-%d'[date=='2001-04-03']"""
try:
    formulas.parseString(args, parseAll=True)
except ParseException as e:
    print("========================================")
    print(e.lineno, e.col)
    print(str(e))
