#!/usr/bin/python3

from pyparsing import (alphas, nums, Combine, Or, printables,
                       Group, Literal, removeQuotes, ParseException,
                       Optional, delimitedList,
                       Suppress, Word, quotedString, CaselessLiteral)


def numeric():
    point = Literal('.')
    e = CaselessLiteral('E')
    plusorminus = Literal('+') | Literal('-')
    number = Word(nums)
    integer = Combine(Optional(plusorminus) + number)
    floatnumber = Combine(integer +
                          Optional(point + Optional(number)) +
                          Optional(e + integer))
    numeric = number | floatnumber
    return numeric


def expand_interval(tokens):
    val_from = int(tokens[0])
    val_to = int(tokens[1]) + 1
    result = list(map(str, range(val_from, val_to)))
    return result


# attr_max_i = 10

# Grammar definition
# NUMVAL = numeric()
# NUMVAR = Word(alphas)
# OP = Or(Literal("<") ^ Literal(">") ^
#         Literal("<=") ^ Literal(">=") ^
#         Literal("=="))
# NUMEXPR = Or(Combine(NUMVAR + OP + NUMVAL, adjacent=False) ^
#              Combine(NUMVAL + OP + NUMVAR, adjacent=False) ^
#              Combine(NUMVAL + OP + NUMVAR + OP + NUMVAL, adjacent=False))
# SCOMMA = Suppress(',')
# QUOTED_STR = quotedString
# DATE_FORMAT = Optional(SCOMMA + QUOTED_STR, default="%Y-%m-%dT%H:%M:%S")
# NO_SCALE_NUM = CaselessLiteral('n')
# NO_SCALE_DATE = CaselessLiteral('d') + DATE_FORMAT
# NO_SCALE_ENUM = CaselessLiteral('e')
# NO_SCALE_STR = CaselessLiteral('s')
# NUM = CaselessLiteral('n') + SCOMMA + NUMEXPR
# DATE = CaselessLiteral('d') + SCOMMA + NUMEXPR + DATE_FORMAT
# ENUM = CaselessLiteral('e') + SCOMMA + Word(alphanums)
# STR = CaselessLiteral('s') + SCOMMA + QUOTED_STR
# GEN = Empty()
# NO_SCALE = NO_SCALE_NUM | NO_SCALE_DATE | NO_SCALE_ENUM | NO_SCALE_STR
# PARAMS = Or(STR ^ ENUM ^ DATE ^ NUM ^ GEN ^ NO_SCALE)
#
# NAME = Word(printables, excludeChars="[]-,=")
# INTERVAL = Optional(Word(nums), default=0) + Suppress("-") + Optional(Word(nums), default=attr_max_i)
# INTERVAL.setParseAction(expand_interval)
# ATTR_SEQUENCE = Group(delimitedList((INTERVAL | NAME)))
# VAR_FIRST_PART = Optional(ATTR_SEQUENCE + Suppress('='), default='') + ATTR_SEQUENCE
#
# VAR_SECOND_PART = Suppress('[') + Group(PARAMS) + Suppress(']')
# VAR = VAR_FIRST_PART + VAR_SECOND_PART
# parser = delimitedList(VAR)
#
# # Parse actions for no scale attributes
# no_scale_default_action = lambda tokens: [tokens[0], {}]
# NO_SCALE_NUM.setParseAction(no_scale_default_action)
# NO_SCALE_ENUM.setParseAction(no_scale_default_action)
# NO_SCALE_STR.setParseAction(no_scale_default_action)
# NO_SCALE_DATE.setParseAction(lambda tokens: [tokens[0], dict(date_format=tokens[1])])
#
# # Parse actions for scale attributes
# scale_default_action = lambda tokens: [tokens[0], dict(expr_pattern=tokens[1])]
# NUM.setParseAction(scale_default_action)
# ENUM.setParseAction(scale_default_action)
# STR.setParseAction(scale_default_action)
# GEN.setParseAction(lambda tokens: ['g', {}])
# DATE.setParseAction(lambda tokens: [tokens[0], dict(expr_pattern=tokens[1],
#                                                     date_format=tokens[2])])
# # Auxiliary parse actions
# QUOTED_STR.setParseAction(removeQuotes)
# VAR_FIRST_PART.setParseAction(lambda tokens: [tokens[1]]*2 if tokens[0] == '' else [tokens[0], tokens[1]])
# VAR.setParseAction(test)
#
# args = ("a, b, c = A, B, C[e,ahoj], b=B[n, 523<=val<=10], same1, 2-4, smae2, -, 20[n, x>=50], no_scale[s], no_scale_gen[], no_scale_date[d, '%Y-%m-%d'], 0-3=a, b, c, d[S, '[,a-z]+'], d=D[], e=E[d, date>2000, '%A %d. %B %Y']")  # NOQA
# try:
#     parser.parseString(args, parseAll=True)
# except ParseException as e:
#     print("========================================")
#     print(e.lineno, e.col)
#     print(str(e))


######################################################################################

def test(s, loc, tokens):
    # print(lineno(loc, s))
    print(tokens)
    print(tokens.names.new_names)
    print(tokens.names.old_names)
    print(tokens.attr_type)
    try:
        print(tokens.attr_type.date_format)
    except:
        pass
    print(tokens.scale)
    print(10*"=")

quoted_str = quotedString
comma = Suppress(",")
date_val = quoted_str
num_val = numeric()
op = Or(Literal("<") ^ Literal(">") ^
        Literal("<=") ^ Literal(">=") ^
        Literal("==") ^ Literal("!="))
var = Word(alphas)
bin_vals = Optional((Literal("0=") + quoted_str + comma)) + Optional(Literal("1=")) + quoted_str
date_scale = Or(Combine(var + op + date_val, adjacent=False) ^
                Combine(date_val + op + var, adjacent=False) ^
                Combine(date_val + op + var + op + date_val, adjacent=False))
str_scale = quoted_str
enum_scale = quoted_str
num_scale = Or(Combine(var + op + num_val, adjacent=False) ^
               Combine(num_val + op + var, adjacent=False) ^
               Combine(num_val + op + var + op + num_val, adjacent=False))
date_format = Optional("F=") + quoted_str
name = (Optional(Word(nums)) + Suppress("-") + Optional(Word(nums))).setParseAction(expand_interval) | Word(printables, excludeChars="[]-,=:")
scale = num_scale | enum_scale | str_scale | date_scale | bin_vals
typ = Or(Literal("n") ^ Literal("e") ^
         Literal("s") ^ Group(Literal("d") + Optional(Suppress("/") + date_format("date_format"), default="%Y-%m-%dT%H:%M:%S")))
names = Group(delimitedList(name))
new_old_names = Optional(names("new_names") + Suppress("="), default='') + names("old_names")
formula = (new_old_names("names") +
           Optional(Or((Suppress(":") + typ("attr_type") + Optional(Suppress("[") + Optional(scale("scale")) + Suppress("]"))) ^ Literal("[]"))))
formulas = delimitedList(formula, delim=";")

quoted_str.setParseAction(removeQuotes)
new_old_names.setParseAction(lambda tokens: [tokens[1]]*2 if tokens[0] == '' else [tokens[0], tokens[1]])
formula.setParseAction(test)

args = """new,new2=old,old2:s['hell[a-z]+'];
          newdate=olddate:d/'%Y-%m-%d';
          5-7:n[5<value<30]"""
try:
    formulas.parseString(args, parseAll=True)
except ParseException as e:
    print("========================================")
    print(e.lineno, e.col)
    print(str(e))
