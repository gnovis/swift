#!/bin/python3

from pyparsing import (OneOrMore, Combine, nums, col, Word, Forward, delimitedList, Literal, printables,
                       restOfLine, CharsNotIn, Optional, Suppress, quotedString, removeQuotes,
                       ZeroOrMore, CaselessLiteral, LineEnd, Group, lineno, WordEnd)

"""
<names> ::= <entry> | (<delimiter> <entry>)*
<entry> ::= <classes> | <attribute> | <blank>
<classes> ::= <string> | <string> "," <classes> | <comment>
<attribute> ::= <string> ":" <type> <comment>? | <comment>
<blank> ::= \s*
<delimiter> ::= "." | "\n"
<string> ::= [^|?,.\s]+
<type> ::= "continuous" | "ignore"| <discrete> | <enum>
<discrete> ::= "discrete" \d+
<enum> ::= <string> | ("," <string>)*
<comment> ::= "|".*

"""


def get_attr(t):
    print("name: {}, type: {}".format(t.name, t.type))


def get_class(t):
    print("class: {}".format(t.cls))


def remove_dots(t):
    value = t[0]
    if value.endswith("."):
        return value[:-1]
    return value

string = Word(printables, excludeChars="|?,:").setParseAction(remove_dots)
comment = "|" + restOfLine
delimiter = Suppress(".") | LineEnd()
enum = Group(delimitedList(string)).setParseAction(lambda t: 'e')
discrete = Literal("discrete") + Suppress(Word(nums))
attr_type = (Literal("continuous") | Literal("ignore") | discrete | enum)("type")
attribute = string("name") + Suppress(":") + attr_type
cls = string("cls")
cls.addParseAction(get_class)
classes = delimitedList(cls)
entry = attribute | classes
attribute.setParseAction(get_attr)
parser = OneOrMore(entry + Optional(delimiter))
parser.ignore(comment)
parser.parseFile('ignore/ignore.names', parseAll=True)
